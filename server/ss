#!/usr/bin/env python

import os
import logging
import parser
import sys
import struct
import time

import daemon

sys.path.append("..")
sys.path.append(os.path.join(sys.path[0], '..'))

from storage.bdb import BTree
from storage.queue import QueuedStorage, QueueFullException
from memcache import binary, constants
from plugins.api import PluginManager

from twisted.application import internet, service
from twisted.internet import reactor, protocol, defer, task
from twisted.python import components
from twisted.web import resource, server

from memcache import binary, constants

class DummyStorage(object):

    def get(self, key, data): pass

    def set(self, key, data): pass

    def delete(self, key, data): pass

    def flush(self): pass

    def sync(self): pass

class MemcachedBinaryProtocol(binary.BinaryServerProtocol):
    storage = DummyStorage()
    default_flags, default_expires, default_cas = 0, 0, 0
    version = "0.0.1"

    def set_storage(cls, storage_impl):
        MemcachedBinaryProtocol.storage = storage_impl
    set_storage = classmethod(set_storage)

    def get(req, data):
        val = MemcachedBinaryProtocol.storage.get(req.key)
        if val: return binary.GetResponse(req,
                MemcachedBinaryProtocol.default_flags, MemcachedBinaryProtocol.default_cas, data=val)
        else: raise binary.MemcachedNotFound()

    def noop(req, data): return binary.Response(req)

    def set(req, data):
        try:
            flags, exp = struct.unpack(constants.SET_PKT_FMT, req.extra)
            MemcachedBinaryProtocol.storage.set(req.key, data)
        except Exception, e:
            print e
            raise binary.MemcachedError()

    def delete(req, data):
        try:
            return MemcachedBinaryProtocol.storage.delete(req.key)
        except KeyError: raise binary.MemcachedNotFound()
        except Exception: raise binary.MemcachedError()

    def quit(*a): raise binary.MemcachedDisconnect()

    def version(req, data):
        return binary.Response(req, data=MemcachedBinaryProtocol.version)

    def flush(): return MemcachedBinaryProtocol.storage.flush()

    def sync(): return MemcachedBinaryProtocol.storage.sync()

    handlers = {
        constants.CMD_GET: get,
        constants.CMD_GETQ: get,
        constants.CMD_NOOP: noop,
        constants.CMD_SET: set,
        constants.CMD_DELETE: delete,
        constants.CMD_VERSION: version,
        constants.CMD_QUIT: quit
    }

class KeyValueIteratorDriver(object):
    def __init__(self, storage, code_string):
        self.storage = storage
        code = self._compile_code_string(code_string)
        exec(code)
        self.visitor = get_key_value_iterator()
        logging.info("compiled IKeyValueIterator %s" % self.visitor)

    def run(self):
        self.visitor.configure(self.storage)

        iterator = self.storage.iterator()
        start = time.time()
        logging.info("starting iterator on %s" % self.visitor)
        try:
            while (iterator.has_next()):
                try:
                    key, value = iterator.next_item()
                    self.visitor.item(key, value)
                except StopIteration: break
        finally:
            logging.info("completed iterator on %s in %s seconds" % (self.visitor, int(time.time() - start)))
            try: iterator.close()
            except Exception, e: logging.exception(e)
            self.visitor.close()

    def _compile_code_string(self, code_string):
        ast = parser.suite(code_string)
        code = ast.compile()
        return code

class WebResourceAdapter(resource.Resource):
    isLeaf = True

    def __init__(self, storage):
        self.storage = storage
        self.routes = {
                '/c/':{'GET':self._get_value, 'PUT':self._put_value, 'DELETE':self._delete_value},
                '/iterator/':{'GET':self._get_iterator_value, 'DELETE':self._delete_iterator},
                '/each/':{'PUT':self._put_each} }
        self.iterators = {}

    def render_GET(self, request):
        op = self._route(request.path, 'GET')
        return op[0](request, op[2])

    def render_PUT(self, request):
        op = self._route(request.path, 'PUT')
        return op[0](request, op[2])

    def render_DELETE(self, request):
        op = self._route(request.path, 'DELETE')
        return op[0](request, op[2])

    def _route(self, path, operation):
        route_key = path[path.find('/'):path.find('/', 1) + 1]
        path_info = path[path.find('/', 1) + 1:]
        try: op = self.routes[route_key][operation]
        except KeyError: op = self._default_action
        return (op, route_key, path_info)

    def _get_value(self, request, path_info):
        key = path_info
        val = self.storage.get(key)
        request.setResponseCode((200, 404)[val is None])
        request.write((val, 'Not found')[val is None])
        request.finish()
        return server.NOT_DONE_YET

    def _put_value(self, request, path_info):
        key = path_info
        data = request.content.getvalue()
        self.storage.set(key, data)
        return 'Saved'

    def _delete_value(self, request, path_info):
        key = path_info
        try:
            self.storage.delete(key)
            return 'Deleted'
        except KeyError:
            request.setResponseCode(404)
            return 'Not found'

    def _get_iterator_value(self, request, path_info):
        name = path_info
        try:
            iter = self.iterators[name]
        except KeyError:
            iter = self.storage.iterator()
            self.iterators[name] = iter
        try:
            if iter.has_next():
                key, value = iter.next_item()
                request.redirect("/c/%s" % key)
                request.finish()
                return server.NOT_DONE_YET
            else:
                iter.close()
                del self.iterators[name]
                request.setResponseCode(404)
                request.write("iterator completed")
                request.finish()
                return server.NOT_DONE_YET
        except Exception, e: raise e

    def _delete_iterator(self, request, path_info):
        name = path_info
        try:
            self.iterators[name].close()
            del self.iterators[name]
            request.setResponseCode(204)
            request.finish()
            return server.NOT_DONE_YET
        except KeyError:
            request.setResponseCode(404)
            return 'Unknown iterator'

    def _put_each(self, request, path_info):
        code_string = request.content.getvalue()
        driver = KeyValueIteratorDriver(self.storage, code_string)
        driver.run()
        request.setResponseCode(200)
        request.write("iterator completed")
        request.finish()
        return server.NOT_DONE_YET

    def _default_action(self, request, path_info):
        request.setResponseCode(404)
        return 'Unknown action'

class StorageWrapper(object):
    def __init__(self, backend):
        self.backend = backend

    def get(self, key):
        return PluginManager().execute("storage.get", self.backend.get, key)

    def set(self, key, value):
        return PluginManager().execute("storage.set", self.backend.set, key, value)

    def delete(self, key):
        return PluginManager().execute("storage.delete", self.backend.delete, key)

    def iterator(self):
        return PluginManager().execute("storage.iterator", self.backend.iterator)

    def flush(self):
        return PluginManager().execute("storage.flush", self.backend.flush)

    def sync(self):
        return PluginManager().execute("storage.sync", self.backend.sync)

    def cleanup(self):
        return PluginManager().execute("storage.cleanup", self.backend.cleanup)

class SeattleSalmon(daemon.Daemon):
    default_conf = '/etc/seattle-salmon.conf'
    default_memcached_port = 8089
    default_http_port = 8090
    section = 'daemon'

    def run(self):
        # start plugin system
        plugin_mgr = PluginManager()
        plugin_mgr.load(self.get_option('daemon', 'plugin-file', None))

        factory = protocol.Factory()
        bdb = BTree(self)

        if bool(self.get_bool_option('bdb', 'queue-writes', default=False)):
            storage = QueuedStorage(bdb, limit=self.get_int_option('bdb', 'queue-writes-limit', default=10000))
        else: storage = bdb

        storage = StorageWrapper(storage)
        MemcachedBinaryProtocol.set_storage(storage)
        factory.protocol = MemcachedBinaryProtocol

        # memcached binary protocol
        memcached_port = int(self.get_option('memcached', 'port', default=self.default_memcached_port))
        if memcached_port != 0: reactor.listenTCP(memcached_port, factory)

        # http protocol
        http_port = int(self.get_option('http', 'port', default=self.default_http_port))
        if http_port != 0:
            site = server.Site(WebResourceAdapter(storage))
            reactor.listenTCP(http_port, site)

        # call flush() every x seconds
        # this appears to be the only way to get a repeating task that runs outside of the main thread
        flush_task = task.LoopingCall(lambda: reactor.callInThread(storage.flush))
        flush_task.start(int(self.get_int_option('bdb', 'flush-frequency', default=5)), now=False)

        # call sync() every y seconds
        sync_task = task.LoopingCall(lambda: reactor.callInThread(storage.sync))
        sync_task.start(int(self.get_int_option('bdb', 'sync-frequency', default=60)), now=False)

        # delete bdb logs every z seconds
        if self.get_bool_option('bdb', 'delete-logs', default=True):
            cleanup_task = task.LoopingCall(lambda: reactor.callInThread(storage.cleanup))
            cleanup_task.start(int(self.get_int_option('bdb', 'cleanup-frequency', default=60)), now=False)

        reactor.run()

if __name__ == '__main__':
    ss = SeattleSalmon()
    ss.parse_options()
    ss.main()
    #ss.read_basic_config()
    #ss.run()

